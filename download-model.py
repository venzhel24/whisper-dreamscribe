#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Whisper –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
"""
import os
import sys
import subprocess
import platform
from pathlib import Path

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
MODELS = {
    'tiny': {'size': '39MB', 'quality': '–ë–∞–∑–æ–≤–æ–µ'},
    'base': {'size': '142MB', 'quality': '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ'},
    'small': {'size': '466MB', 'quality': '–•–æ—Ä–æ—à–µ–µ'},
    'medium': {'size': '1.5GB', 'quality': '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ'},
    'large-v2': {'size': '2.9GB', 'quality': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ'}
}

def load_env_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_file = Path('.env')
    if not env_file.exists():
        return None

    try:
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line.startswith('WHISPER_MODEL='):
                    return line.split('=', 1)[1].strip()
    except Exception:
        pass

    return None

def check_python():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    if sys.version_info < (3, 8):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} –Ω–∞–π–¥–µ–Ω")
    return True

def install_faster_whisper():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç faster-whisper –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    try:
        import faster_whisper
        print("‚úÖ faster-whisper —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError:
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ faster-whisper...")
        try:
            subprocess.run([sys.executable, '-m', 'pip', 'install', 'faster-whisper>=1.0.0'],
                           check=True, capture_output=True)
            print("‚úÖ faster-whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ faster-whisper: {e}")
            return False

def download_model(model_name: str, models_dir: Path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
    model_path = models_dir / model_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫–∞—á–∞–Ω–∞ –ª–∏ —É–∂–µ –º–æ–¥–µ–ª—å
    if model_path.exists() and any(model_path.iterdir()):
        print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {model_path}")
        return True

    try:
        print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name} ({MODELS[model_name]['size']})...")
        print(f"üìÅ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {model_path}")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏
        model_path.mkdir(parents=True, exist_ok=True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫—ç—à–∞
        os.environ['HF_HOME'] = str(models_dir)
        os.environ['TRANSFORMERS_CACHE'] = str(models_dir)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        from faster_whisper import WhisperModel

        model = WhisperModel(
            model_name,
            device="cpu",
            compute_type="int8",
            download_root=str(models_dir)
        )

        print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞!")
        print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {MODELS[model_name]['quality']}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {model_name}: {e}")
        # –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–∫–∞—á–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
        if model_path.exists():
            import shutil
            shutil.rmtree(model_path, ignore_errors=True)
        return False

def main():
    print("=" * 50)
    print("üöÄ –ó–∞–≥—Ä—É–∑—á–∏–∫ –º–æ–¥–µ–ª–∏ Whisper –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_python():
        sys.exit(1)

    if not install_faster_whisper():
        sys.exit(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    model_name = None

    # –ò–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        model_name = sys.argv[1]

    # –ò–∑ .env —Ñ–∞–π–ª–∞
    if not model_name:
        model_name = load_env_model()
        if model_name:
            print(f"üìã –ú–æ–¥–µ–ª—å –∏–∑ .env —Ñ–∞–π–ª–∞: {model_name}")

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not model_name:
        model_name = 'large-v2'
        print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {model_name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    if model_name not in MODELS:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {model_name}")
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for name, info in MODELS.items():
            print(f"   {name:<12} - {info['size']:<8} - {info['quality']}")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–µ–π
    models_dir = Path('./models')
    models_dir.mkdir(exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
    print()
    if download_model(model_name, models_dir):
        print()
        print("üéâ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {models_dir / model_name}")
        print("üê≥ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å")
        sys.exit(1)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
