#!/bin/bash

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    else
        echo "unknown"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker"
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose"
        exit 1
    fi

    if ! command -v python3 &> /dev/null; then
        log_error "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+"
        exit 1
    fi

    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤
setup_project() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p {models,logs}

    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    if [[ ! -f .env ]]; then
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
        cat > .env << EOF
REDIS_HOST=redis
REDIS_PORT=6379
WHISPER_MODEL=large-v2
JOBS_QUEUE=transcription_jobs
RESULTS_QUEUE=transcription_results
WHISPER_THREADS=8
WHISPER_LANGUAGE=auto
LOG_LEVEL=INFO
EOF
        log_success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ Docker —Å–µ—Ç–∏
    if ! docker network ls | grep -q dreamscribe-network; then
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ Docker —Å–µ—Ç–∏..."
        docker network create dreamscribe-network
        log_success "–°–µ—Ç—å dreamscribe-network —Å–æ–∑–¥–∞–Ω–∞"
    fi
}

# –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
show_menu() {
    echo -e "${CYAN}======================================${NC}"
    echo -e "${PURPLE}üöÄ Whisper DreamScribe Manager${NC}"
    echo -e "${CYAN}======================================${NC}"
    echo
    echo "1. üì• –°–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å"
    echo "2. üî® –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å"
    echo "3. ‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å (–±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏)"
    echo "4. üßπ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞"
    echo "5. üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo "6. üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "7. üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "8. üßΩ –û—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "9. üö™ –í—ã—Ö–æ–¥"
    echo
}

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
download_model() {
    log_info "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏..."
    python3 scripts/download-model.py
    if [[ $? -eq 0 ]]; then
        log_success "–ú–æ–¥–µ–ª—å —Å–∫–∞—á–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"
        return 1
    fi
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
build_and_run() {
    log_info "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞..."
    docker-compose -f docker/docker-compose.yml build

    if [[ $? -eq 0 ]]; then
        log_success "–û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"
        start_services
    else
        log_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker/docker-compose.yml up -d

    if [[ $? -eq 0 ]]; then
        log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
        show_useful_commands
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
        return 1
    fi
}

# –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞
full_rebuild() {
    log_info "–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    docker-compose -f docker/docker-compose.yml down
    docker system prune -f
    docker-compose -f docker/docker-compose.yml build --no-cache
    start_services
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker/docker-compose.yml down
    log_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    log_info "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
    docker-compose -f docker/docker-compose.yml logs -f whisper-dreamscribe
}

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
show_status() {
    log_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    docker-compose -f docker/docker-compose.yml ps
    echo
    log_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    docker stats whisper-dreamscribe --no-stream 2>/dev/null || log_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
}

# –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
cleanup_system() {
    log_warning "–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã Docker..."
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker-compose -f docker/docker-compose.yml down
        docker system prune -a -f
        docker volume prune -f
        log_success "–°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞"
    fi
}

# –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
show_useful_commands() {
    echo
    log_info "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  docker-compose -f docker/docker-compose.yml ps           - —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  docker-compose -f docker/docker-compose.yml logs -f      - –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  docker-compose -f docker/docker-compose.yml stop         - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  docker stats whisper-dreamscribe                        - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${GREEN}üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Whisper DreamScribe!${NC}"
    echo -e "${CYAN}–°–∏—Å—Ç–µ–º–∞: $(detect_os)${NC}"
    echo

    check_dependencies
    setup_project

    while true; do
        show_menu
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-9): " choice

        case $choice in
            1) download_model ;;
            2) build_and_run ;;
            3) start_services ;;
            4) full_rebuild ;;
            5) stop_services ;;
            6) show_logs ;;
            7) show_status ;;
            8) cleanup_system ;;
            9)
                log_info "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
                exit 0
                ;;
            *)
                log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                ;;
        esac

        echo
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        echo
    done
}

# –ó–∞–ø—É—Å–∫
main "$@"
