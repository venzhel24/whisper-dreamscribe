#!/usr/bin/env python3
"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π Whisper –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞.
–°–æ–≤–º–µ—Å—Ç–∏–º —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Pydantic Settings.
"""

import os
import sys
import subprocess
import platform
from pathlib import Path
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from src.config import settings
    USE_PROJECT_CONFIG = True
except ImportError:
    # Fallback –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    USE_PROJECT_CONFIG = False

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
MODELS: Dict[str, Dict[str, Any]] = {
    'tiny': {
        'size': '39MB',
        'quality': '–ë–∞–∑–æ–≤–æ–µ',
        'speed': '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ',
        'accuracy': '~70%'
    },
    'base': {
        'size': '142MB',
        'quality': '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ',
        'speed': '–ë—ã—Å—Ç—Ä–æ',
        'accuracy': '~80%'
    },
    'small': {
        'size': '466MB',
        'quality': '–•–æ—Ä–æ—à–µ–µ',
        'speed': '–°—Ä–µ–¥–Ω–µ',
        'accuracy': '~85%'
    },
    'medium': {
        'size': '1.5GB',
        'quality': '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ',
        'speed': '–ú–µ–¥–ª–µ–Ω–Ω–æ',
        'accuracy': '~90%'
    },
    'large-v2': {
        'size': '2.9GB',
        'quality': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ',
        'speed': '–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ',
        'accuracy': '~95%'
    }
}

def print_colored(text: str, color: str = "") -> None:
    """–ü–µ—á–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Windows."""
    colors = {
        'red': '\033[91m',
        'green': '\033[92m',
        'yellow': '\033[93m',
        'blue': '\033[94m',
        'purple': '\033[95m',
        'cyan': '\033[96m',
        'white': '\033[97m',
        'bold': '\033[1m',
        'end': '\033[0m'
    }

    if platform.system() == 'Windows':
        try:
            # –í–∫–ª—é—á–∞–µ–º ANSI –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ Windows 10+
            import ctypes
            kernel32 = ctypes.windll.kernel32
            kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7)
        except:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –ø–µ—á–∞—Ç–∞–µ–º –±–µ–∑ —Ü–≤–µ—Ç–æ–≤
            print(text)
            return

    color_code = colors.get(color, '')
    end_code = colors.get('end', '')
    print(f"{color_code}{text}{end_code}")

def load_env_model() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    if USE_PROJECT_CONFIG:
        return settings.whisper_model

    # Fallback - —á—Ç–µ–Ω–∏–µ –∏–∑ .env —Ñ–∞–π–ª–∞
    env_file = Path('.env')
    if not env_file.exists():
        return 'large-v2'

    try:
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line.startswith('WHISPER_MODEL='):
                    return line.split('=', 1)[1].strip()
    except Exception:
        pass

    return 'large-v2'

def check_system_requirements() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è."""
    print_colored("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...", "blue")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if sys.version_info < (3, 8):
        print_colored(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}", "red")
        return False
    print_colored(f"‚úÖ Python {sys.version.split()[0]} –Ω–∞–π–¥–µ–Ω", "green")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    try:
        subprocess.run([sys.executable, '-m', 'pip', '--version'],
                      check=True, capture_output=True)
        print_colored("‚úÖ pip –Ω–∞–π–¥–µ–Ω", "green")
    except subprocess.CalledProcessError:
        print_colored("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω", "red")
        return False

    return True

def install_faster_whisper() -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç faster-whisper –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."""
    try:
        import faster_whisper
        print_colored("‚úÖ faster-whisper —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "green")
        return True
    except ImportError:
        print_colored("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ faster-whisper...", "yellow")
        try:
            subprocess.run([
                sys.executable, '-m', 'pip', 'install',
                'faster-whisper>=1.0.0', '--upgrade'
            ], check=True, capture_output=True)
            print_colored("‚úÖ faster-whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "green")
            return True
        except subprocess.CalledProcessError as e:
            print_colored(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ faster-whisper: {e}", "red")
            return False

def check_disk_space(model_name: str, models_dir: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ."""
    model_sizes = {
        'tiny': 50,      # MB
        'base': 200,     # MB
        'small': 500,    # MB
        'medium': 1600,  # MB
        'large-v2': 3000 # MB
    }

    required_mb = model_sizes.get(model_name, 1000)

    try:
        free_bytes = os.statvfs(models_dir).f_frsize * os.statvfs(models_dir).f_bavail
        free_mb = free_bytes / (1024 * 1024)
    except AttributeError:
        # Windows
        import shutil
        free_bytes = shutil.disk_usage(models_dir).free
        free_mb = free_bytes / (1024 * 1024)

    if free_mb < required_mb:
        print_colored(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è: {required_mb}MB, –¥–æ—Å—Ç—É–ø–Ω–æ: {free_mb:.0f}MB", "red")
        return False

    print_colored(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {free_mb:.0f}MB –¥–æ—Å—Ç—É–ø–Ω–æ", "green")
    return True

def download_model(model_name: str, models_dir: Path) -> bool:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏
    possible_paths = [
        models_dir / model_name,
        models_dir / f"models--Systran--faster-whisper-{model_name}",
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫–∞—á–∞–Ω–∞ –ª–∏ —É–∂–µ –º–æ–¥–µ–ª—å
    for model_path in possible_paths:
        if model_path.exists() and any(model_path.iterdir()):
            print_colored(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {model_path}", "green")
            return True

    if not check_disk_space(model_name, models_dir):
        return False

    try:
        model_info = MODELS[model_name]
        print_colored(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name}:", "blue")
        print_colored(f"   üìä –†–∞–∑–º–µ—Ä: {model_info['size']}", "cyan")
        print_colored(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {model_info['quality']} ({model_info['accuracy']})", "cyan")
        print_colored(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {model_info['speed']}", "cyan")
        print_colored(f"   üìÅ –ü—É—Ç—å: {models_dir}", "cyan")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥–µ–ª–µ–π
        models_dir.mkdir(parents=True, exist_ok=True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫—ç—à–∞
        os.environ['HF_HOME'] = str(models_dir)
        os.environ['TRANSFORMERS_CACHE'] = str(models_dir)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        from faster_whisper import WhisperModel

        print_colored("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...", "yellow")

        model = WhisperModel(
            model_name,
            device="cpu",
            compute_type="int8",
            download_root=str(models_dir)
        )

        print_colored(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞!", "green")
        print_colored(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {models_dir}", "green")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        downloaded_path = None
        for path in possible_paths:
            if path.exists():
                downloaded_path = path
                break

        if downloaded_path:
            files = list(downloaded_path.rglob("*"))
            total_size = sum(f.stat().st_size for f in files if f.is_file())
            total_size_mb = total_size / (1024 * 1024)
            print_colored(f"üì¶ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.1f}MB", "cyan")

        return True

    except Exception as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {model_name}: {e}", "red")

        # –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
        for path in possible_paths:
            if path.exists():
                import shutil
                try:
                    shutil.rmtree(path, ignore_errors=True)
                    print_colored(f"üßπ –£–¥–∞–ª–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Å–∫–∞—á–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {path}", "yellow")
                except:
                    pass

        return False

def list_models() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    print_colored("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Whisper:", "bold")
    print()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    header = f"{'–ú–æ–¥–µ–ª—å':<12} {'–†–∞–∑–º–µ—Ä':<8} {'–¢–æ—á–Ω–æ—Å—Ç—å':<10} {'–ö–∞—á–µ—Å—Ç–≤–æ':<18} {'–°–∫–æ—Ä–æ—Å—Ç—å':<15}"
    print_colored(header, "cyan")
    print_colored("-" * len(header), "cyan")

    # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    for name, info in MODELS.items():
        line = f"{name:<12} {info['size']:<8} {info['accuracy']:<10} {info['quality']:<18} {info['speed']:<15}"
        print_colored(line, "white")

    print()
    print_colored("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", "yellow")
    print_colored("   ‚Ä¢ tiny/base - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "white")
    print_colored("   ‚Ä¢ small/medium - –¥–ª—è production —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏", "white")
    print_colored("   ‚Ä¢ large-v2 - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞", "white")

def interactive_mode() -> str:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    print_colored("ü§ñ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", "bold")
    print()

    models_list = list(MODELS.keys())
    for i, (name, info) in enumerate(MODELS.items(), 1):
        print_colored(f"{i}. {name:<12} - {info['size']:<8} - {info['quality']} ({info['accuracy']})", "white")

    print()

    while True:
        try:
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ (1-5): ").strip()
            choice_num = int(choice)

            if 1 <= choice_num <= len(MODELS):
                selected_model = models_list[choice_num - 1]
                print_colored(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model}", "green")
                return selected_model
            else:
                print_colored("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", "red")

        except ValueError:
            print_colored("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.", "red")
        except KeyboardInterrupt:
            print_colored("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "yellow")
            sys.exit(0)

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print_colored("=" * 60, "cyan")
    print_colored("üöÄ –ó–∞–≥—Ä—É–∑—á–∏–∫ –º–æ–¥–µ–ª–µ–π Whisper DreamScribe", "bold")
    print_colored(f"üíª –°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}", "cyan")
    print_colored("=" * 60, "cyan")
    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    if not check_system_requirements():
        sys.exit(1)

    if not install_faster_whisper():
        sys.exit(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    model_name = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()
        if arg in ['--list', '-l', 'list']:
            list_models()
            return
        elif arg in ['--interactive', '-i', 'interactive']:
            model_name = interactive_mode()
        elif arg in MODELS:
            model_name = arg
        else:
            print_colored(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞: {arg}", "red")
            list_models()
            sys.exit(1)

    # –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ .env —Ñ–∞–π–ª–∞
    if not model_name:
        model_name = load_env_model()
        if model_name != 'large-v2':  # –ï—Å–ª–∏ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            print_colored(f"üìã –ú–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {model_name}", "blue")
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å
            print_colored("ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º", "yellow")
            model_name = interactive_mode()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    if model_name not in MODELS:
        print_colored(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {model_name}", "red")
        list_models()
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–µ–π
    models_dir = Path('./models')
    models_dir.mkdir(exist_ok=True)

    print()
    print_colored(f"üéØ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}", "blue")

    # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
    if download_model(model_name, models_dir):
        print()
        print_colored("üéâ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!", "green")
        print_colored("üê≥ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", "blue")
        print_colored("üìã –ö–æ–º–∞–Ω–¥—ã:", "cyan")
        print_colored("   scripts\\deploy.bat    - Windows", "white")
        print_colored("   ./scripts/deploy.sh   - Linux/macOS", "white")
    else:
        print_colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å", "red")
        sys.exit(1)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print_colored("\nüëã –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "yellow")
        sys.exit(0)
    except Exception as e:
        print_colored(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "red")
        import traceback
        traceback.print_exc()
        sys.exit(1)
